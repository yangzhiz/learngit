/*
安装：
Linux:
$ git
The program 'git' is currently not installed. You can install it by typing:
sudo apt-get install git
Windows:
1、msysgit是Windows版的Git，从http://msysgit.github.io/下载，然后按默认选项安装即可。
2、打开Git Bash
   $ git config --global user.name "Your Name"
   $ git config --global user.email "email@example.com"
*/
-----------------基础操作--------------------
一、创建版本库
$ mkdir learngit
$ cd learngit
$ pwd					//该命令用于显示当前目录
$ git init				//通过git init命令把这个目录变成Git可以管理的仓库
2、把一个文件放到Git仓库只需要两步（首先手动创建一个readme.txt ，然后在bash中利用：cd '文件所在文件夹' 进入.git所在文件夹。注意单引号 ）
$ git add readme.txt                    //添加到仓库  实际上就是把文件修改添加到暂存区   可以同时add多个文件  git add abc.txt bcd.txt
$ git commit -m "wrote a readme file"   //提交到仓库  实际上就是把暂存区的所有内容一次性提交到当前分支 -m后面输入的是本次提交的说明
-----------------版本转换--------------------
一、文件修改并提交
  修改目录下的readme.txt
$ git status               //git status命令可以让我们时刻掌握仓库当前的状态
$ git diff readme.txt      //git diff 就是查看difference。如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
$ git add readme.txt  
$ git commit -m "abc"
二、版本回退
$ git log                  //git log命令显示从最近到最远的提交日志
$ git log --pretty=oneline //简便输出
$ git reset --hard HEAD^   //在Git中，用HEAD表示当前版本,上一个版本就是HEAD^，上上一个版本就是HEAD^^，往上100个版本可以写成HEAD~100。
$ git reflog               //git reflog用来记录你的每一次命令
三、工作区和暂存区
(1)Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD
(2)git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支
四、管理修改
$ cat readme.txt              //$ cat filename 一次显示整个文件。
修改readme.txt
$ git add readme.txt
$ git status
再修改readme.txt
$ git commit -m "git tracks changes"
$ git status                  //结果是第二次修改并未提交。因为第二次修改并未添加add到暂存区stage。
$ git diff HEAD -- readme.txt //该命令可以查看版本库里面最新版本和工作区（即电脑里能看到的目录）的区别。
注意：1.每次修改，如果不add到暂存区，那就不会加入到commit中。
      2.第一次修改 -> git add -> 第二次修改 -> git add -> git commit。
五、撤销修改
----文件修改后未add到暂存区----
修改文件
$ git checkout -- readme.txt  //命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，注意仅仅是工作区。
                              //这里有两种情况：
                              //一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态.
                              //一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
-----文件修改后add到暂存区-----
修改文件
$ git add readme.txt          
$ git status                   //Changes to be committed

$ git reset HEAD readme.txt    //用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区

$ git status                   //Changes not staged for commit
$ git checkout -- readme.txt   //先撤销暂存区的修改，再撤销工作区的修改！
$ git status                   //nothing to commit, working directory clean
-----文件修改后add到暂存区，又commit到master分支-----
$ git reset --hard HEAD^       //只好版本回退。前提是还没有把自己的本地版本库推送到远程。否则GG
六、删除文件
创建文件test.txt,并add以及commit。
$ rm test.txt                 //用rm命令删除工作区文件
$ git status                  //deleted:    test.txt 工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了
-->1.确实要删除test.txt，同时要删除版本库文件
   $ git rm test.txt          //注意添加git之后的区别，加上git会同时删除版本库的文件
   $ git commit -m "remove test.txt"
   $ git checkout -- test.txt //error 文件已被彻底删除。
-->2.误删删除test.txt，同时要撤销删除
   $ git checkout -- test.txt //只要一个文件已经被提交到版本库，那么不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。
----------------------远程仓库-----------------------
1、GitHub官网注册yangzhiz                                            
2、看看主目录下有没有.ssh目录（C盘User目录）
3、若没有： $ ssh-keygen -t rsa -C "youremail@example.com" 一路回车
4、显示隐藏文件--主目录--.ssh文件夹--记事本打开id_rsa.pub--全选复制
5、官网个人设置：SSH keys-add SSH keys---title随意---key---复制---add key
一、添加远程库
1、登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库
2、在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库。
3、在本地的learngit仓库下运行命令：
   $ git remote add origin git@github.com:abc/learngit.git    //abc为GitHub账户名,learngit为在Github创建的仓库名
   $ git push -u origin master                                //用git push命令，把本地库的内容推送到远程，实际上是把当前分支master推送到远程。 注意：中间可能要输入GitHub的账户ID和密码。                                        
                                                              //由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
4、$ git push origin master                                   //只要本地作了提交，就可以通过此命令把本地master分支的最新修改推送至GitHub。注意：此操作需要联网。现在，你就拥有了真正的分布式版本库！
二、从远程库克隆
1、首先，登陆GitHub，创建一个新的仓库，名字叫gitskills
2、勾选Initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件
3、本地： $ git clone git@github.com:abc/learngit.git         //abc为GitHub账户名,learngit为在Github创建的仓库名
4、当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告。回车输入 yes 即可
5、$ cd gitskills                                             //可以打开gitskills目录，证明克隆成功
   $ ls							      //显示gitskills下的文件。	
6、Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
----------------------分支管理-----------------------
一、创建与合并分支
1、一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点。
2、每次提交(commit)，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长。
3、练习：
   $ git checkout -b dev                     //命令加上-b参数表示创建并切换，相当于以下两条命令：$ git branch dev  $ git checkout dev
   $ git branch                              //git branch命令会列出所有分支，当前分支前面会标一个*号
   对readme.txt做个修改，加上一行：Creating a new branch is quick.
   $ git add readme.txt 
   $ git commit -m "branch test"
   $ git checkout master                     //打开readme.txt文件，刚才添加的内容不见了！
   $ git merge dev			     //合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的
                                             //Fast-forward信息告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。
   $ git branch -d dev
4、总结
   查看分支：git branch

   创建分支：git branch <name>

   切换分支：git checkout <name>

   创建+切换分支：git checkout -b <name>

   合并某分支abc到当前分支：git merge <abc>

   删除分支：git branch -d <name>
二、解决冲突
$ git log --graph --pretty=oneline --abbrev-commit  //用带参数的git log也可以看到分支的合并情况
                                                    //当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
三、分支管理策略
$ git merge --no-ff -m "merge with no-ff" dev       //准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward。Git就会在merge时生成一个新的commit。这样，从分支历史上就可以看出分支信息
                                                    //因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去
$ git log --graph --pretty=oneline --abbrev-commit
总结：合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
      在实际开发中，我们应该按照几个基本原则进行分支管理：
      首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
      那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
      你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
四、Bug分支
1、修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
2、当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
$ git stash					  //当前正在dev上进行的工作还没有提交。但是，必须立即修复bug。Git还、因此提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作
$ git checkout master				  //要求在master分支上修复编号为101的bug，
$ git checkout -b issue-101			  //新建临时的bug分支
$ git checkout master
$ git merge --no-ff -m "merged bug fix 101" issue-101
$ git branch -d issue-101                         //修复完成后，切换到master分支，并完成合并，最后删除issue-101分支
$ git checkout dev				  //接着回到dev分支干活	
$ git stash list				  //可以看到Git把stash内容存在某个地方了
						  //$ git stash apply                         
						  //$ git stash drop			
						  //一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
$ git stash pop					  //另一种方式是用git stash pop，恢复的同时把stash内容也删了
$ git stash apply stash@{0}                       //你可以多次stash，恢复的时候，先用git stash list查看，然后用此命令恢复指定的stash。
五、Feature分支
软件开发中，总有无穷无尽的新的功能要不断添加进来。
添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。
$ git checkout -b feature-vulcan		  //工作要求添加新功能vulcan
$ git add javagit.java
$ git status
$ git commit -m "add feature vulcan"     
$ git checkout dev                                //准备合并
$ git branch -d feature-vulcan                    //因工作需要，要求删除新功能vulcan
						  //销毁失败。Git友情提醒，feature-vulcan分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用命令git branch -D feature-vulcan。
$ git branch -D feature-vulcan
总结：
开发一个新feature，最好新建一个分支；
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
六、多人协作 ￥
当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。
$ git remote              //要查看远程库的信息，用git remote
$ git remote -v           //用git remote -v显示更详细的信息
  origin  https://github.com/yangzhiz/learngit.git (fetch)
  origin  https://github.com/yangzhiz/learngit.git (push)    //此处显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。

1、推送分支
推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上
$ git push origin master  //推送master分支
$ git push origin dev     //推送dev分支
2、获取分支
（1）模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆
     新建一个目录：gitpartner，在bash中进入此目录
$ git clone git@github.com:abc/learngit.git    //abc为GitHub账户名,learngit为在Github创建的仓库名
$ cd learngit
$ git config user.name "romeo"
$ git config user.email "romeo@bjtu.edu.cn"
$ git branch				       // * master
$ git checkout -b dev origin/dev
$ vi yang.java				       // 改为println("I am romeo")
$ git add yang.java
$ git commit -m "change to romeo"
$ git push origin dev                          //此时origin中dev分支下变为"I am romeo"
（2）此时进入gitlearn目录下
$ git checkout dev
$ vi yang.java
$ git add yang.java
$ git commit -m "yang not romeo"
$ git push origin dev			       //推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送
$ git pull				       //git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接
$ git branch --set-upstream dev origin/dev     
$ git pull				       //这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。
$ vi yang.java                                 //保留两个输出语句
$ git add yang.java
$ git commit -m "finally"
$ git push origin dev			       //成功	

因此，多人协作的工作模式通常是这样：
首先，可以试图用git push origin branch-name推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
这就是多人协作的工作模式，一旦熟悉了，就非常简单。
小结：
查看远程库信息，使用git remote -v；
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
----------------------标签管理-----------------------
发布一个版本时，我们通常先在版本库中打一个标签，这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。
Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。
一、创建标签
$ git tag <name>                            //用于新建一个标签，默认标签是打在最新提交的commit上的。（默认为HEAD，也可以指定一个commit id）
$ git log --pretty=oneline --abbrev-commit  //找到历史提交的commit id，然后打上就可以了
$ git tag -a <tagname> -m "..."             //可以指定标签信息；
$ git tag -s <tagname> -m "..."             //可以用PGP签名标签；签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错。
					    //如果上条语句出错，则需要先生成GPG Key。（gpg --gen-key）然后再执行，如果依然有错，则执行下句。
$ git tag -u "yangzhi" -s v1.1 -m "..."     
$ git tag                                   //可以查看所有标签。注意，标签不是按时间顺序列出，而是按字母排序的。
二、操作标签
$ git tag -d <tagname>			    //可以删除一个本地标签；
$ git push origin <tagname>		    //可以推送一个本地标签；
$ git push origin --tags		    //可以推送全部未推送过的本地标签；
$ git push origin :refs/tags/<tagname>	    //可以删除一个远程标签。  注意：如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除，然后，从远程删除。
----------------------使用GitHub-----------------------
在GitHub上，可以任意Fork开源仓库；
自己拥有Fork后的仓库的读写权限；
可以推送pull request给官方仓库来贡献代码。
-----------------------自定义Git-----------------------
除了配置user.name和user.email。实际上，Git还有很多可配置项
一、忽略特殊文件
忽略文件的原则是：
忽略操作系统自动生成的文件，比如缩略图等；
忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。
总结：
1、检验.gitignore的标准是git status命令是不是说working directory clean
2、忽略某些文件时，需要编写.gitignore；
3、.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！
二、配置别名 ~~                           
$ git config --global alias.st status             //敲git st就表示git status    --global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。
$ git config --global alias.cec checkout
$ git config --global alias.com commit
$ git config --global alias.bra 
$ git config --global alias.unstage 'reset HEAD'  //在撤销修改一节中，我们知道，命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个unstage别名 
$ git config --global alias.last 'log -1'         //用git last就能显示最近一次的提交
$ git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
注意：配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。
配置文件放哪了？每个仓库的Git配置文件都放在.git/config文件中。
$ cat .git/config   //当前仓库的Git配置文件都放在工作区的 .git/config 文件中。
$ cat .gitconfig    //当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中。
配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。
三、搭建Git服务器