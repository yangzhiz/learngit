/*
安装：
Linux:
$ git
The program 'git' is currently not installed. You can install it by typing:
sudo apt-get install git
Windows:
1、msysgit是Windows版的Git，从http://msysgit.github.io/下载，然后按默认选项安装即可。
2、打开Git Bash
   $ git config --global user.name "Your Name"
   $ git config --global user.email "email@example.com"
*/
-----------------基础操作--------------------
一、创建版本库
$ mkdir learngit
$ cd learngit
$ pwd //该命令用于显示当前目录
2、把一个文件放到Git仓库只需要两步（首先手动创建一个readme.txt ，然后在bash中利用：cd '文件所在文件夹' 进入.git所在文件夹。注意单引号 ）
$ git add readme.txt                    //添加到仓库  实际上就是把文件修改添加到暂存区
$ git commit -m "wrote a readme file"   //提交到仓库  实际上就是把暂存区的所有内容一次性提交到当前分支 -m后面输入的是本次提交的说明
-----------------版本转换--------------------
一、文件修改并提交
  修改目录下的readme.txt
$ git status               //git status命令可以让我们时刻掌握仓库当前的状态
$ git diff readme.txt      //git diff 就是查看difference。如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
$ git add readme.txt  
$ git commit
二、版本回退
$ git log                  //git log命令显示从最近到最远的提交日志
$ git log --pretty=oneline //简便输出
$ git reset --hard HEAD^   //在Git中，用HEAD表示当前版本,上一个版本就是HEAD^，上上一个版本就是HEAD^^，往上100个版本可以写成HEAD~100。
$ git reflog               //git reflog用来记录你的每一次命令
三、工作区和暂存区
(1)Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD
(2)git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支
四、管理修改
$ cat readme.txt              //$ cat filename 一次显示整个文件。
修改readme.txt
$ git add readme.txt
$ git status
再修改readme.txt
$ git commit -m "git tracks changes"
$ git status                  //结果是第二次修改并未提交。因为第二次修改并未添加add到暂存区stage。
$ git diff HEAD -- readme.txt //该命令可以查看版本库里面最新版本和工作区（即电脑里能看到的目录）的区别。
注意：1.每次修改，如果不add到暂存区，那就不会加入到commit中。
      2.第一次修改 -> git add -> 第二次修改 -> git add -> git commit。
五、撤销修改
----文件修改后未add到暂存区----
修改文件
$ git checkout -- readme.txt  //命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，注意仅仅是工作区。
                              //这里有两种情况：
                              //一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态.
                              //一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
-----文件修改后add到暂存区-----
修改文件
$ git add readme.txt          
$ git status                   //Changes to be committed
$ git reset HEAD readme.txt    //用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区
$ git status                   //Changes not staged for commit
$ git checkout -- readme.txt   //先撤销暂存区的修改，再撤销工作区的修改！
$ git status                   //nothing to commit, working directory clean
-----文件修改后add到暂存区，又commit到master分支-----
$ git reset --hard HEAD^       //前提是还没有把自己的本地版本库推送到远程。否则GG
六、删除文件
创建文件test.txt,并add以及commit。
$ rm test.txt                 //用rm命令删除工作区文件
$ git status                  //deleted:    test.txt 工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了
-->1.确实要删除test.txt，同时要删除版本库文件
   $ git rm test.txt
   $ git commit -m "remove test.txt"
   $ git checkout -- test.txt //error 文件已被彻底删除。
-->2.误删删除test.txt，同时要撤销删除
   $ git checkout -- test.txt //如果一个文件已经被提交到版本库，那么不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。
----------------------远程仓库-----------------------
1、GitHub官网注册
2、看看主目录下有没有.ssh目录（C盘User目录）
3、若没有： $ ssh-keygen -t rsa -C "youremail@example.com" 一路回车
4、显示隐藏文件--主目录--.ssh文件夹--记事本打开id_rsa.pub--全选复制
5、官网个人设置：SSH keys-add SSH keys---title随意---key---复制---add key
一、添加远程库
1、登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库
2、在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库。
3、在本地的learngit仓库下运行命令：
   $ git remote add origin git@github.com:abc/learngit.git    //abc为GitHub账户名,learngit为在Github创建的仓库名
   $ git push -u origin master                                //用git push命令，把本地库的内容推送到远程，实际上是把当前分支master推送到远程。 注意：中间可能要输入GitHub的账户ID和密码。                                        
                                                              //由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
4、$ git push origin master                                   //只要本地作了提交，就可以通过此命令把本地master分支的最新修改推送至GitHub。注意：此操作需要联网。现在，你就拥有了真正的分布式版本库！
二、从远程库克隆
1、首先，登陆GitHub，创建一个新的仓库，名字叫gitskills
2、勾选Initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件
3、本地： $ git clone git@github.com:abc/learngit.git         //abc为GitHub账户名,learngit为在Github创建的仓库名
4、当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告。回车输入 yes 即可
5、$ cd gitskills                                             //可以打开gitskills目录，证明克隆成功
   $ ls							      //显示gitskills下的文件。	
6、Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
----------------------分支管理-----------------------
一、创建与合并分支
1、一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点。
2、每次提交(commit)，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长。
3、练习：
   $ git checkout -b dev                     //命令加上-b参数表示创建并切换，相当于以下两条命令：$ git branch dev  $ git checkout dev
   $ git branch                              //git branch命令会列出所有分支，当前分支前面会标一个*号
   对readme.txt做个修改，加上一行：Creating a new branch is quick.
   $ git add readme.txt 
   $ git commit -m "branch test"
   $ git checkout master                     //打开readme.txt文件，刚才添加的内容不见了！
   $ git merge dev			     //合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的
                                             //Fast-forward信息告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。
   $ git branch -d dev
4、总结
   查看分支：git branch

   创建分支：git branch <name>

   切换分支：git checkout <name>

   创建+切换分支：git checkout -b <name>

   合并某分支到当前分支：git merge <name>

   删除分支：git branch -d <name>
